
Teste.elf:     file format elf32-littlenios2
Teste.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000012a0 memsz 0x000012a0 flags r-x
    LOAD off    0x000022c0 vaddr 0x000052c0 paddr 0x000058d0 align 2**12
         filesz 0x00000610 memsz 0x00000610 flags rw-
    LOAD off    0x00002ee0 vaddr 0x00005ee0 paddr 0x00005ee0 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000011f0  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  00005210  00005210  00002210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000610  000052c0  000058d0  000022c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000001a0  00005ee0  00005ee0  00002ee0  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000028d0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000348  00000000  00000000  000028f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000004d9  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00005fc0  00000000  00000000  00003119  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000153f  00000000  00000000  000090d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003bd7  00000000  00000000  0000a618  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000560  00000000  00000000  0000e1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000abf  00000000  00000000  0000e750  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000a75  00000000  00000000  0000f20f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000fc84  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  0000fc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00011093  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00011096  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00011097  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  000110a0  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000006  00000000  00000000  000110a4  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000038  00000000  00000000  000110aa  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00034e89  00000000  00000000  000110e2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00005210 l    d  .rodata	00000000 .rodata
000052c0 l    d  .rwdata	00000000 .rwdata
00005ee0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000042fc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000052c0 l     O .rwdata	00000048 Char_Buffer_with_DMA
000044cc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_close.c
00004908 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004984 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004a64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000054b0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004ff8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000051ac l     F .text	00000040 alt_sim_halt
00004368 g     F .text	00000050 alt_main
000058d0 g       *ABS*	00000000 __flash_rwdata_start
00004698 g     F .text	00000114 alt_up_char_buffer_string
000045c8 g     F .text	000000d0 alt_up_char_buffer_draw
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005eec g     O .bss	00000004 errno
00005ee4 g     O .bss	00000004 alt_argv
0000d8b0 g       *ABS*	00000000 _gp
00005330 g     O .rwdata	00000180 alt_fd_list
00004b8c g     F .text	00000094 alt_find_dev
000047ac g     F .text	0000005c alt_up_char_buffer_clear
00005210 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
000058c0 g     O .rwdata	00000004 alt_max_fd
000058cc g     O .rwdata	00000004 _global_impure_ptr
00006080 g       *ABS*	00000000 __bss_end
00004114 g     F .text	00000098 VGA_text
00005308 g     O .rwdata	00000028 alt_dev_null
00004968 g     F .text	0000001c alt_dcache_flush_all
000058d0 g       *ABS*	00000000 __ram_rwdata_end
000058b8 g     O .rwdata	00000008 alt_dev_list
000052c0 g       *ABS*	00000000 __ram_rodata_end
00006080 g       *ABS*	00000000 end
00004504 g     F .text	00000084 alt_up_char_buffer_init
0000520c g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004ffc g     F .text	000001b0 __call_exitprocs
00004020 g     F .text	0000003c _start
000043ec g     F .text	000000e0 alt_sys_init
00004ec4 g     F .text	00000134 __register_exitproc
00004244 g     F .text	00000038 __mulsi3
000052c0 g       *ABS*	00000000 __ram_rwdata_start
00005210 g       *ABS*	00000000 __ram_rodata_start
00004d20 g     F .text	00000074 memcmp
00006080 g       *ABS*	00000000 __alt_stack_base
000049b0 g     F .text	000000b4 alt_dev_llist_insert
00005ee0 g       *ABS*	00000000 __bss_start
000041ac g     F .text	00000098 memset
0000405c g     F .text	000000b8 main
00005ee8 g     O .bss	00000004 alt_envp
00004588 g     F .text	00000040 alt_up_char_buffer_open_dev
00005ef0 g     O .bss	00000190 _atexit0
000058c4 g     O .rwdata	00000004 alt_errno
00005210 g       *ABS*	00000000 __CTOR_END__
00004d94 g     F .text	000000bc strcmp
00005210 g       *ABS*	00000000 __flash_rodata_start
00005210 g       *ABS*	00000000 __DTOR_LIST__
000043b8 g     F .text	00000034 alt_irq_init
00004c3c g     F .text	00000078 alt_release_fd
00004cd4 g     F .text	00000014 atexit
000058c8 g     O .rwdata	00000004 _impure_ptr
00005ee0 g     O .bss	00000004 alt_argc
00004b28 g     F .text	00000064 _do_dtors
000058b0 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000058d0 g       *ABS*	00000000 _edata
00006080 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
00004cb4 g     F .text	00000020 altera_nios2_qsys_irq_init
00004ce8 g     F .text	00000038 exit
00008000 g       *ABS*	00000000 __alt_data_end
000051ec g     F .text	00000020 _exit
00004e50 g     F .text	00000074 strlen
00004c20 g     F .text	0000001c alt_icache_flush_all
00004ac4 g     F .text	00000064 _do_ctors
00004808 g     F .text	00000100 close
0000427c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b62c14 	ori	gp,gp,55472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1097b814 	ori	r2,r2,24288

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d82014 	ori	r3,r3,24704

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000427c0 	call	427c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00043680 	call	4368 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
/********************************************************************************
 * This program demonstrates use of the char buffer. It places a text string
 * near the middle of the screen, in white.
********************************************************************************/
int main(void)
{
    405c:	deffea04 	addi	sp,sp,-88
    4060:	dfc01515 	stw	ra,84(sp)
    4064:	df001415 	stw	fp,80(sp)
    4068:	df001404 	addi	fp,sp,80
	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE2\0";
    406c:	00c00034 	movhi	r3,0
    4070:	18d48404 	addi	r3,r3,21008
    4074:	18800017 	ldw	r2,0(r3)
    4078:	e0bfec15 	stw	r2,-80(fp)
    407c:	18800117 	ldw	r2,4(r3)
    4080:	e0bfed15 	stw	r2,-76(fp)
    4084:	18800217 	ldw	r2,8(r3)
    4088:	e0bfee15 	stw	r2,-72(fp)
    408c:	e03fef15 	stw	zero,-68(fp)
    4090:	e03ff015 	stw	zero,-64(fp)
    4094:	e03ff115 	stw	zero,-60(fp)
    4098:	e03ff215 	stw	zero,-56(fp)
    409c:	e03ff315 	stw	zero,-52(fp)
    40a0:	e03ff415 	stw	zero,-48(fp)
    40a4:	e03ff515 	stw	zero,-44(fp)
	char text_bottom_row[40] = "Char Buffer\0";
    40a8:	00c00034 	movhi	r3,0
    40ac:	18d48e04 	addi	r3,r3,21048
    40b0:	18800017 	ldw	r2,0(r3)
    40b4:	e0bff615 	stw	r2,-40(fp)
    40b8:	18800117 	ldw	r2,4(r3)
    40bc:	e0bff715 	stw	r2,-36(fp)
    40c0:	18800217 	ldw	r2,8(r3)
    40c4:	e0bff815 	stw	r2,-32(fp)
    40c8:	18800303 	ldbu	r2,12(r3)
    40cc:	e0bff905 	stb	r2,-28(fp)
    40d0:	e13ff944 	addi	r4,fp,-27
    40d4:	018006c4 	movi	r6,27
    40d8:	000b883a 	mov	r5,zero
    40dc:	00041ac0 	call	41ac <memset>

	/* output text message near the middle of the VGA monitor */
	VGA_text (35, 29, text_top_row);
    40e0:	010008c4 	movi	r4,35
    40e4:	01400744 	movi	r5,29
    40e8:	e1bfec04 	addi	r6,fp,-80
    40ec:	00041140 	call	4114 <VGA_text>
	VGA_text (35, 30, text_bottom_row);
    40f0:	e1bff604 	addi	r6,fp,-40
    40f4:	010008c4 	movi	r4,35
    40f8:	01400784 	movi	r5,30
    40fc:	00041140 	call	4114 <VGA_text>
}
    4100:	e037883a 	mov	sp,fp
    4104:	dfc00117 	ldw	ra,4(sp)
    4108:	df000017 	ldw	fp,0(sp)
    410c:	dec00204 	addi	sp,sp,8
    4110:	f800283a 	ret

00004114 <VGA_text>:

/****************************************************************************************
 * Subroutine to send a string of text to the VGA monitor
****************************************************************************************/
void VGA_text(int x, int y, char * text_ptr)
{
    4114:	defffa04 	addi	sp,sp,-24
    4118:	df000515 	stw	fp,20(sp)
    411c:	df000504 	addi	fp,sp,20
    4120:	e13ffd15 	stw	r4,-12(fp)
    4124:	e17ffe15 	stw	r5,-8(fp)
    4128:	e1bfff15 	stw	r6,-4(fp)
	int offset;
	/* Declare volatile pointer to char buffer (volatile means that IO load
	   and store instructions will be used to access these pointer locations,
	   instead of regular memory loads and stores) */
  	volatile char * character_buffer = (char *) 0x00008000;	// VGA character buffer
    412c:	00a00014 	movui	r2,32768
    4130:	e0bffb15 	stw	r2,-20(fp)

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
    4134:	e0bffe17 	ldw	r2,-8(fp)
    4138:	100691fa 	slli	r3,r2,7
    413c:	e0bffd17 	ldw	r2,-12(fp)
    4140:	1885883a 	add	r2,r3,r2
    4144:	e0bffc15 	stw	r2,-16(fp)
	while ( *(text_ptr) )
    4148:	00000d06 	br	4180 <VGA_text+0x6c>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
    414c:	e0bffc17 	ldw	r2,-16(fp)
    4150:	1007883a 	mov	r3,r2
    4154:	e0bffb17 	ldw	r2,-20(fp)
    4158:	1887883a 	add	r3,r3,r2
    415c:	e0bfff17 	ldw	r2,-4(fp)
    4160:	10800003 	ldbu	r2,0(r2)
    4164:	18800005 	stb	r2,0(r3)
		++text_ptr;
    4168:	e0bfff17 	ldw	r2,-4(fp)
    416c:	10800044 	addi	r2,r2,1
    4170:	e0bfff15 	stw	r2,-4(fp)
		++offset;
    4174:	e0bffc17 	ldw	r2,-16(fp)
    4178:	10800044 	addi	r2,r2,1
    417c:	e0bffc15 	stw	r2,-16(fp)
	   instead of regular memory loads and stores) */
  	volatile char * character_buffer = (char *) 0x00008000;	// VGA character buffer

	/* assume that the text string fits on one line */
	offset = (y << 7) + x;
	while ( *(text_ptr) )
    4180:	e0bfff17 	ldw	r2,-4(fp)
    4184:	10800003 	ldbu	r2,0(r2)
    4188:	10803fcc 	andi	r2,r2,255
    418c:	1080201c 	xori	r2,r2,128
    4190:	10bfe004 	addi	r2,r2,-128
    4194:	1004c03a 	cmpne	r2,r2,zero
    4198:	103fec1e 	bne	r2,zero,414c <VGA_text+0x38>
	{
		*(character_buffer + offset) = *(text_ptr);	// write to the character buffer
		++text_ptr;
		++offset;
	}
}
    419c:	e037883a 	mov	sp,fp
    41a0:	df000017 	ldw	fp,0(sp)
    41a4:	dec00104 	addi	sp,sp,4
    41a8:	f800283a 	ret

000041ac <memset>:
    41ac:	008000c4 	movi	r2,3
    41b0:	29403fcc 	andi	r5,r5,255
    41b4:	2007883a 	mov	r3,r4
    41b8:	1180022e 	bgeu	r2,r6,41c4 <memset+0x18>
    41bc:	2084703a 	and	r2,r4,r2
    41c0:	10000826 	beq	r2,zero,41e4 <memset+0x38>
    41c4:	30000526 	beq	r6,zero,41dc <memset+0x30>
    41c8:	2805883a 	mov	r2,r5
    41cc:	30cd883a 	add	r6,r6,r3
    41d0:	18800005 	stb	r2,0(r3)
    41d4:	18c00044 	addi	r3,r3,1
    41d8:	19bffd1e 	bne	r3,r6,41d0 <memset+0x24>
    41dc:	2005883a 	mov	r2,r4
    41e0:	f800283a 	ret
    41e4:	2804923a 	slli	r2,r5,8
    41e8:	020003c4 	movi	r8,15
    41ec:	200f883a 	mov	r7,r4
    41f0:	2884b03a 	or	r2,r5,r2
    41f4:	1006943a 	slli	r3,r2,16
    41f8:	10c6b03a 	or	r3,r2,r3
    41fc:	41800a2e 	bgeu	r8,r6,4228 <memset+0x7c>
    4200:	4005883a 	mov	r2,r8
    4204:	31bffc04 	addi	r6,r6,-16
    4208:	38c00015 	stw	r3,0(r7)
    420c:	38c00115 	stw	r3,4(r7)
    4210:	38c00215 	stw	r3,8(r7)
    4214:	38c00315 	stw	r3,12(r7)
    4218:	39c00404 	addi	r7,r7,16
    421c:	11bff936 	bltu	r2,r6,4204 <memset+0x58>
    4220:	008000c4 	movi	r2,3
    4224:	1180052e 	bgeu	r2,r6,423c <memset+0x90>
    4228:	31bfff04 	addi	r6,r6,-4
    422c:	008000c4 	movi	r2,3
    4230:	38c00015 	stw	r3,0(r7)
    4234:	39c00104 	addi	r7,r7,4
    4238:	11bffb36 	bltu	r2,r6,4228 <memset+0x7c>
    423c:	3807883a 	mov	r3,r7
    4240:	003fe006 	br	41c4 <memset+0x18>

00004244 <__mulsi3>:
    4244:	20000a26 	beq	r4,zero,4270 <__mulsi3+0x2c>
    4248:	0007883a 	mov	r3,zero
    424c:	2080004c 	andi	r2,r4,1
    4250:	1005003a 	cmpeq	r2,r2,zero
    4254:	2008d07a 	srli	r4,r4,1
    4258:	1000011e 	bne	r2,zero,4260 <__mulsi3+0x1c>
    425c:	1947883a 	add	r3,r3,r5
    4260:	294b883a 	add	r5,r5,r5
    4264:	203ff91e 	bne	r4,zero,424c <__mulsi3+0x8>
    4268:	1805883a 	mov	r2,r3
    426c:	f800283a 	ret
    4270:	0007883a 	mov	r3,zero
    4274:	1805883a 	mov	r2,r3
    4278:	f800283a 	ret

0000427c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    427c:	defffe04 	addi	sp,sp,-8
    4280:	dfc00115 	stw	ra,4(sp)
    4284:	df000015 	stw	fp,0(sp)
    4288:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    428c:	01000034 	movhi	r4,0
    4290:	21163404 	addi	r4,r4,22736
    4294:	01400034 	movhi	r5,0
    4298:	2954b004 	addi	r5,r5,21184
    429c:	01800034 	movhi	r6,0
    42a0:	31963404 	addi	r6,r6,22736
    42a4:	00042fc0 	call	42fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    42a8:	01000034 	movhi	r4,0
    42ac:	21100804 	addi	r4,r4,16416
    42b0:	01400034 	movhi	r5,0
    42b4:	29500804 	addi	r5,r5,16416
    42b8:	01800034 	movhi	r6,0
    42bc:	31900804 	addi	r6,r6,16416
    42c0:	00042fc0 	call	42fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    42c4:	01000034 	movhi	r4,0
    42c8:	21148404 	addi	r4,r4,21008
    42cc:	01400034 	movhi	r5,0
    42d0:	29548404 	addi	r5,r5,21008
    42d4:	01800034 	movhi	r6,0
    42d8:	3194b004 	addi	r6,r6,21184
    42dc:	00042fc0 	call	42fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    42e0:	00049680 	call	4968 <alt_dcache_flush_all>
  alt_icache_flush_all();
    42e4:	0004c200 	call	4c20 <alt_icache_flush_all>
}
    42e8:	e037883a 	mov	sp,fp
    42ec:	dfc00117 	ldw	ra,4(sp)
    42f0:	df000017 	ldw	fp,0(sp)
    42f4:	dec00204 	addi	sp,sp,8
    42f8:	f800283a 	ret

000042fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    42fc:	defffc04 	addi	sp,sp,-16
    4300:	df000315 	stw	fp,12(sp)
    4304:	df000304 	addi	fp,sp,12
    4308:	e13ffd15 	stw	r4,-12(fp)
    430c:	e17ffe15 	stw	r5,-8(fp)
    4310:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4314:	e0fffe17 	ldw	r3,-8(fp)
    4318:	e0bffd17 	ldw	r2,-12(fp)
    431c:	18800e26 	beq	r3,r2,4358 <alt_load_section+0x5c>
  {
    while( to != end )
    4320:	00000a06 	br	434c <alt_load_section+0x50>
    {
      *to++ = *from++;
    4324:	e0bffd17 	ldw	r2,-12(fp)
    4328:	10c00017 	ldw	r3,0(r2)
    432c:	e0bffe17 	ldw	r2,-8(fp)
    4330:	10c00015 	stw	r3,0(r2)
    4334:	e0bffe17 	ldw	r2,-8(fp)
    4338:	10800104 	addi	r2,r2,4
    433c:	e0bffe15 	stw	r2,-8(fp)
    4340:	e0bffd17 	ldw	r2,-12(fp)
    4344:	10800104 	addi	r2,r2,4
    4348:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    434c:	e0fffe17 	ldw	r3,-8(fp)
    4350:	e0bfff17 	ldw	r2,-4(fp)
    4354:	18bff31e 	bne	r3,r2,4324 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    4358:	e037883a 	mov	sp,fp
    435c:	df000017 	ldw	fp,0(sp)
    4360:	dec00104 	addi	sp,sp,4
    4364:	f800283a 	ret

00004368 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4368:	defffd04 	addi	sp,sp,-12
    436c:	dfc00215 	stw	ra,8(sp)
    4370:	df000115 	stw	fp,4(sp)
    4374:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4378:	0009883a 	mov	r4,zero
    437c:	00043b80 	call	43b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4380:	00043ec0 	call	43ec <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4384:	0004ac40 	call	4ac4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4388:	01000034 	movhi	r4,0
    438c:	2112ca04 	addi	r4,r4,19240
    4390:	0004cd40 	call	4cd4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4394:	d1218c17 	ldw	r4,-31184(gp)
    4398:	d1618d17 	ldw	r5,-31180(gp)
    439c:	d1a18e17 	ldw	r6,-31176(gp)
    43a0:	000405c0 	call	405c <main>
    43a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    43a8:	01000044 	movi	r4,1
    43ac:	00048080 	call	4808 <close>
  exit (result);
    43b0:	e13fff17 	ldw	r4,-4(fp)
    43b4:	0004ce80 	call	4ce8 <exit>

000043b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    43b8:	defffd04 	addi	sp,sp,-12
    43bc:	dfc00215 	stw	ra,8(sp)
    43c0:	df000115 	stw	fp,4(sp)
    43c4:	df000104 	addi	fp,sp,4
    43c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    43cc:	0004cb40 	call	4cb4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    43d0:	00800044 	movi	r2,1
    43d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    43d8:	e037883a 	mov	sp,fp
    43dc:	dfc00117 	ldw	ra,4(sp)
    43e0:	df000017 	ldw	fp,0(sp)
    43e4:	dec00204 	addi	sp,sp,8
    43e8:	f800283a 	ret

000043ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    43ec:	defffe04 	addi	sp,sp,-8
    43f0:	dfc00115 	stw	ra,4(sp)
    43f4:	df000015 	stw	fp,0(sp)
    43f8:	d839883a 	mov	fp,sp
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER_WITH_DMA, Char_Buffer_with_DMA);
    43fc:	00800034 	movhi	r2,0
    4400:	1094b004 	addi	r2,r2,21184
    4404:	10800a17 	ldw	r2,40(r2)
    4408:	10800104 	addi	r2,r2,4
    440c:	10800017 	ldw	r2,0(r2)
    4410:	10ffffcc 	andi	r3,r2,65535
    4414:	00800034 	movhi	r2,0
    4418:	1094b004 	addi	r2,r2,21184
    441c:	10c00c15 	stw	r3,48(r2)
    4420:	00800034 	movhi	r2,0
    4424:	1094b004 	addi	r2,r2,21184
    4428:	10800a17 	ldw	r2,40(r2)
    442c:	10800104 	addi	r2,r2,4
    4430:	10800017 	ldw	r2,0(r2)
    4434:	1005d43a 	srai	r2,r2,16
    4438:	10ffffcc 	andi	r3,r2,65535
    443c:	00800034 	movhi	r2,0
    4440:	1094b004 	addi	r2,r2,21184
    4444:	10c00d15 	stw	r3,52(r2)
    4448:	00800034 	movhi	r2,0
    444c:	1094b004 	addi	r2,r2,21184
    4450:	10800c17 	ldw	r2,48(r2)
    4454:	10801068 	cmpgeui	r2,r2,65
    4458:	1000081e 	bne	r2,zero,447c <alt_sys_init+0x90>
    445c:	00c00034 	movhi	r3,0
    4460:	18d4b004 	addi	r3,r3,21184
    4464:	00800fc4 	movi	r2,63
    4468:	18800f15 	stw	r2,60(r3)
    446c:	00c00034 	movhi	r3,0
    4470:	18d4b004 	addi	r3,r3,21184
    4474:	00800184 	movi	r2,6
    4478:	18801015 	stw	r2,64(r3)
    447c:	00800034 	movhi	r2,0
    4480:	1094b004 	addi	r2,r2,21184
    4484:	10800d17 	ldw	r2,52(r2)
    4488:	10800868 	cmpgeui	r2,r2,33
    448c:	1000041e 	bne	r2,zero,44a0 <alt_sys_init+0xb4>
    4490:	00c00034 	movhi	r3,0
    4494:	18d4b004 	addi	r3,r3,21184
    4498:	008007c4 	movi	r2,31
    449c:	18801115 	stw	r2,68(r3)
    44a0:	01000034 	movhi	r4,0
    44a4:	2114b004 	addi	r4,r4,21184
    44a8:	00045040 	call	4504 <alt_up_char_buffer_init>
    44ac:	01000034 	movhi	r4,0
    44b0:	2114b004 	addi	r4,r4,21184
    44b4:	00044cc0 	call	44cc <alt_dev_reg>
}
    44b8:	e037883a 	mov	sp,fp
    44bc:	dfc00117 	ldw	ra,4(sp)
    44c0:	df000017 	ldw	fp,0(sp)
    44c4:	dec00204 	addi	sp,sp,8
    44c8:	f800283a 	ret

000044cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    44cc:	defffd04 	addi	sp,sp,-12
    44d0:	dfc00215 	stw	ra,8(sp)
    44d4:	df000115 	stw	fp,4(sp)
    44d8:	df000104 	addi	fp,sp,4
    44dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    44e0:	e13fff17 	ldw	r4,-4(fp)
    44e4:	01400034 	movhi	r5,0
    44e8:	29562e04 	addi	r5,r5,22712
    44ec:	00049b00 	call	49b0 <alt_dev_llist_insert>
}
    44f0:	e037883a 	mov	sp,fp
    44f4:	dfc00117 	ldw	ra,4(sp)
    44f8:	df000017 	ldw	fp,0(sp)
    44fc:	dec00204 	addi	sp,sp,8
    4500:	f800283a 	ret

00004504 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    4504:	defffc04 	addi	sp,sp,-16
    4508:	dfc00315 	stw	ra,12(sp)
    450c:	df000215 	stw	fp,8(sp)
    4510:	df000204 	addi	fp,sp,8
    4514:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    4518:	e0bfff17 	ldw	r2,-4(fp)
    451c:	10800217 	ldw	r2,8(r2)
    4520:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    4524:	00000c06 	br	4558 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    4528:	e13ffe17 	ldw	r4,-8(fp)
    452c:	01400034 	movhi	r5,0
    4530:	2954a504 	addi	r5,r5,21140
    4534:	0004d940 	call	4d94 <strcmp>
    4538:	1004c03a 	cmpne	r2,r2,zero
    453c:	1000031e 	bne	r2,zero,454c <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    4540:	e0bffe17 	ldw	r2,-8(fp)
    4544:	10000005 	stb	zero,0(r2)
			break;
    4548:	00000a06 	br	4574 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    454c:	e0bffe17 	ldw	r2,-8(fp)
    4550:	10800044 	addi	r2,r2,1
    4554:	e0bffe15 	stw	r2,-8(fp)
    4558:	e0bffe17 	ldw	r2,-8(fp)
    455c:	10800003 	ldbu	r2,0(r2)
    4560:	10803fcc 	andi	r2,r2,255
    4564:	1080201c 	xori	r2,r2,128
    4568:	10bfe004 	addi	r2,r2,-128
    456c:	1004c03a 	cmpne	r2,r2,zero
    4570:	103fed1e 	bne	r2,zero,4528 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    4574:	e037883a 	mov	sp,fp
    4578:	dfc00117 	ldw	ra,4(sp)
    457c:	df000017 	ldw	fp,0(sp)
    4580:	dec00204 	addi	sp,sp,8
    4584:	f800283a 	ret

00004588 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    4588:	defffc04 	addi	sp,sp,-16
    458c:	dfc00315 	stw	ra,12(sp)
    4590:	df000215 	stw	fp,8(sp)
    4594:	df000204 	addi	fp,sp,8
    4598:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    459c:	e13fff17 	ldw	r4,-4(fp)
    45a0:	01400034 	movhi	r5,0
    45a4:	29562e04 	addi	r5,r5,22712
    45a8:	0004b8c0 	call	4b8c <alt_find_dev>
    45ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    45b0:	e0bffe17 	ldw	r2,-8(fp)
}
    45b4:	e037883a 	mov	sp,fp
    45b8:	dfc00117 	ldw	ra,4(sp)
    45bc:	df000017 	ldw	fp,0(sp)
    45c0:	dec00204 	addi	sp,sp,8
    45c4:	f800283a 	ret

000045c8 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    45c8:	defff904 	addi	sp,sp,-28
    45cc:	df000615 	stw	fp,24(sp)
    45d0:	df000604 	addi	fp,sp,24
    45d4:	e13ffb15 	stw	r4,-20(fp)
    45d8:	e1bffd15 	stw	r6,-12(fp)
    45dc:	e1fffe15 	stw	r7,-8(fp)
    45e0:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    45e4:	e0bffb17 	ldw	r2,-20(fp)
    45e8:	10c00c17 	ldw	r3,48(r2)
    45ec:	e0bffd17 	ldw	r2,-12(fp)
    45f0:	10c0042e 	bgeu	r2,r3,4604 <alt_up_char_buffer_draw+0x3c>
    45f4:	e0bffb17 	ldw	r2,-20(fp)
    45f8:	10c00d17 	ldw	r3,52(r2)
    45fc:	e0bffe17 	ldw	r2,-8(fp)
    4600:	10c00336 	bltu	r2,r3,4610 <alt_up_char_buffer_draw+0x48>
		return -1;
    4604:	00bfffc4 	movi	r2,-1
    4608:	e0bfff15 	stw	r2,-4(fp)
    460c:	00001d06 	br	4684 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    4610:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    4614:	e0bffb17 	ldw	r2,-20(fp)
    4618:	10c00f17 	ldw	r3,60(r2)
    461c:	e0bffd17 	ldw	r2,-12(fp)
    4620:	1886703a 	and	r3,r3,r2
    4624:	e0bffb17 	ldw	r2,-20(fp)
    4628:	10800e17 	ldw	r2,56(r2)
    462c:	1886983a 	sll	r3,r3,r2
    4630:	e0bffa17 	ldw	r2,-24(fp)
    4634:	10c4b03a 	or	r2,r2,r3
    4638:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    463c:	e0bffb17 	ldw	r2,-20(fp)
    4640:	10c01117 	ldw	r3,68(r2)
    4644:	e0bffe17 	ldw	r2,-8(fp)
    4648:	1886703a 	and	r3,r3,r2
    464c:	e0bffb17 	ldw	r2,-20(fp)
    4650:	10801017 	ldw	r2,64(r2)
    4654:	1886983a 	sll	r3,r3,r2
    4658:	e0bffa17 	ldw	r2,-24(fp)
    465c:	10c4b03a 	or	r2,r2,r3
    4660:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    4664:	e0bffb17 	ldw	r2,-20(fp)
    4668:	10800b17 	ldw	r2,44(r2)
    466c:	1007883a 	mov	r3,r2
    4670:	e0bffa17 	ldw	r2,-24(fp)
    4674:	1885883a 	add	r2,r3,r2
    4678:	e0fffc03 	ldbu	r3,-16(fp)
    467c:	10c00025 	stbio	r3,0(r2)

	return 0;
    4680:	e03fff15 	stw	zero,-4(fp)
    4684:	e0bfff17 	ldw	r2,-4(fp)
}
    4688:	e037883a 	mov	sp,fp
    468c:	df000017 	ldw	fp,0(sp)
    4690:	dec00104 	addi	sp,sp,4
    4694:	f800283a 	ret

00004698 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    4698:	defff904 	addi	sp,sp,-28
    469c:	df000615 	stw	fp,24(sp)
    46a0:	df000604 	addi	fp,sp,24
    46a4:	e13ffb15 	stw	r4,-20(fp)
    46a8:	e17ffc15 	stw	r5,-16(fp)
    46ac:	e1bffd15 	stw	r6,-12(fp)
    46b0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    46b4:	e0bffb17 	ldw	r2,-20(fp)
    46b8:	10c00c17 	ldw	r3,48(r2)
    46bc:	e0bffd17 	ldw	r2,-12(fp)
    46c0:	10c0042e 	bgeu	r2,r3,46d4 <alt_up_char_buffer_string+0x3c>
    46c4:	e0bffb17 	ldw	r2,-20(fp)
    46c8:	10c00d17 	ldw	r3,52(r2)
    46cc:	e0bffe17 	ldw	r2,-8(fp)
    46d0:	10c00336 	bltu	r2,r3,46e0 <alt_up_char_buffer_string+0x48>
		return -1;
    46d4:	00bfffc4 	movi	r2,-1
    46d8:	e0bfff15 	stw	r2,-4(fp)
    46dc:	00002e06 	br	4798 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    46e0:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    46e4:	e0bffb17 	ldw	r2,-20(fp)
    46e8:	10801017 	ldw	r2,64(r2)
    46ec:	1007883a 	mov	r3,r2
    46f0:	e0bffe17 	ldw	r2,-8(fp)
    46f4:	10c6983a 	sll	r3,r2,r3
    46f8:	e0bffd17 	ldw	r2,-12(fp)
    46fc:	1885883a 	add	r2,r3,r2
    4700:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    4704:	00001c06 	br	4778 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    4708:	e0bffb17 	ldw	r2,-20(fp)
    470c:	10800b17 	ldw	r2,44(r2)
    4710:	1007883a 	mov	r3,r2
    4714:	e0bffa17 	ldw	r2,-24(fp)
    4718:	1889883a 	add	r4,r3,r2
    471c:	e0bffc17 	ldw	r2,-16(fp)
    4720:	10800003 	ldbu	r2,0(r2)
    4724:	10c03fcc 	andi	r3,r2,255
    4728:	18c0201c 	xori	r3,r3,128
    472c:	18ffe004 	addi	r3,r3,-128
    4730:	2005883a 	mov	r2,r4
    4734:	10c00025 	stbio	r3,0(r2)
		++ptr;
    4738:	e0bffc17 	ldw	r2,-16(fp)
    473c:	10800044 	addi	r2,r2,1
    4740:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    4744:	e0bffd17 	ldw	r2,-12(fp)
    4748:	10800044 	addi	r2,r2,1
    474c:	e0bffd15 	stw	r2,-12(fp)
    4750:	e0bffb17 	ldw	r2,-20(fp)
    4754:	10c00c17 	ldw	r3,48(r2)
    4758:	e0bffd17 	ldw	r2,-12(fp)
    475c:	10c00336 	bltu	r2,r3,476c <alt_up_char_buffer_string+0xd4>
			return -1;
    4760:	00bfffc4 	movi	r2,-1
    4764:	e0bfff15 	stw	r2,-4(fp)
    4768:	00000b06 	br	4798 <alt_up_char_buffer_string+0x100>
		++offset;
    476c:	e0bffa17 	ldw	r2,-24(fp)
    4770:	10800044 	addi	r2,r2,1
    4774:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    4778:	e0bffc17 	ldw	r2,-16(fp)
    477c:	10800003 	ldbu	r2,0(r2)
    4780:	10803fcc 	andi	r2,r2,255
    4784:	1080201c 	xori	r2,r2,128
    4788:	10bfe004 	addi	r2,r2,-128
    478c:	1004c03a 	cmpne	r2,r2,zero
    4790:	103fdd1e 	bne	r2,zero,4708 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    4794:	e03fff15 	stw	zero,-4(fp)
    4798:	e0bfff17 	ldw	r2,-4(fp)
}
    479c:	e037883a 	mov	sp,fp
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00104 	addi	sp,sp,4
    47a8:	f800283a 	ret

000047ac <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    47ac:	defffe04 	addi	sp,sp,-8
    47b0:	df000115 	stw	fp,4(sp)
    47b4:	df000104 	addi	fp,sp,4
    47b8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    47bc:	e0bfff17 	ldw	r2,-4(fp)
    47c0:	10800a17 	ldw	r2,40(r2)
    47c4:	10800084 	addi	r2,r2,2
    47c8:	1007883a 	mov	r3,r2
    47cc:	00800044 	movi	r2,1
    47d0:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    47d4:	e0bfff17 	ldw	r2,-4(fp)
    47d8:	10800a17 	ldw	r2,40(r2)
    47dc:	10800084 	addi	r2,r2,2
    47e0:	10800023 	ldbuio	r2,0(r2)
    47e4:	1080004c 	andi	r2,r2,1
    47e8:	10803fcc 	andi	r2,r2,255
    47ec:	1004c03a 	cmpne	r2,r2,zero
    47f0:	103ff81e 	bne	r2,zero,47d4 <alt_up_char_buffer_clear+0x28>
	return 0;
    47f4:	0005883a 	mov	r2,zero
}
    47f8:	e037883a 	mov	sp,fp
    47fc:	df000017 	ldw	fp,0(sp)
    4800:	dec00104 	addi	sp,sp,4
    4804:	f800283a 	ret

00004808 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    4808:	defff804 	addi	sp,sp,-32
    480c:	dfc00715 	stw	ra,28(sp)
    4810:	df000615 	stw	fp,24(sp)
    4814:	df000604 	addi	fp,sp,24
    4818:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    481c:	e0bffc17 	ldw	r2,-16(fp)
    4820:	1004803a 	cmplt	r2,r2,zero
    4824:	1000091e 	bne	r2,zero,484c <close+0x44>
    4828:	e13ffc17 	ldw	r4,-16(fp)
    482c:	01400304 	movi	r5,12
    4830:	00042440 	call	4244 <__mulsi3>
    4834:	1007883a 	mov	r3,r2
    4838:	00800034 	movhi	r2,0
    483c:	1094cc04 	addi	r2,r2,21296
    4840:	1887883a 	add	r3,r3,r2
    4844:	e0ffff15 	stw	r3,-4(fp)
    4848:	00000106 	br	4850 <close+0x48>
    484c:	e03fff15 	stw	zero,-4(fp)
    4850:	e0bfff17 	ldw	r2,-4(fp)
    4854:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    4858:	e0bffb17 	ldw	r2,-20(fp)
    485c:	1005003a 	cmpeq	r2,r2,zero
    4860:	10001d1e 	bne	r2,zero,48d8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    4864:	e0bffb17 	ldw	r2,-20(fp)
    4868:	10800017 	ldw	r2,0(r2)
    486c:	10800417 	ldw	r2,16(r2)
    4870:	1005003a 	cmpeq	r2,r2,zero
    4874:	1000071e 	bne	r2,zero,4894 <close+0x8c>
    4878:	e0bffb17 	ldw	r2,-20(fp)
    487c:	10800017 	ldw	r2,0(r2)
    4880:	10800417 	ldw	r2,16(r2)
    4884:	e13ffb17 	ldw	r4,-20(fp)
    4888:	103ee83a 	callr	r2
    488c:	e0bffe15 	stw	r2,-8(fp)
    4890:	00000106 	br	4898 <close+0x90>
    4894:	e03ffe15 	stw	zero,-8(fp)
    4898:	e0bffe17 	ldw	r2,-8(fp)
    489c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    48a0:	e13ffc17 	ldw	r4,-16(fp)
    48a4:	0004c3c0 	call	4c3c <alt_release_fd>
    if (rval < 0)
    48a8:	e0bffa17 	ldw	r2,-24(fp)
    48ac:	1004403a 	cmpge	r2,r2,zero
    48b0:	1000071e 	bne	r2,zero,48d0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    48b4:	00049080 	call	4908 <alt_get_errno>
    48b8:	e0fffa17 	ldw	r3,-24(fp)
    48bc:	00c7c83a 	sub	r3,zero,r3
    48c0:	10c00015 	stw	r3,0(r2)
      return -1;
    48c4:	00bfffc4 	movi	r2,-1
    48c8:	e0bffd15 	stw	r2,-12(fp)
    48cc:	00000806 	br	48f0 <close+0xe8>
    }
    return 0;
    48d0:	e03ffd15 	stw	zero,-12(fp)
    48d4:	00000606 	br	48f0 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    48d8:	00049080 	call	4908 <alt_get_errno>
    48dc:	1007883a 	mov	r3,r2
    48e0:	00801444 	movi	r2,81
    48e4:	18800015 	stw	r2,0(r3)
    return -1;
    48e8:	00bfffc4 	movi	r2,-1
    48ec:	e0bffd15 	stw	r2,-12(fp)
    48f0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    48f4:	e037883a 	mov	sp,fp
    48f8:	dfc00117 	ldw	ra,4(sp)
    48fc:	df000017 	ldw	fp,0(sp)
    4900:	dec00204 	addi	sp,sp,8
    4904:	f800283a 	ret

00004908 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4908:	defffd04 	addi	sp,sp,-12
    490c:	dfc00215 	stw	ra,8(sp)
    4910:	df000115 	stw	fp,4(sp)
    4914:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4918:	00800034 	movhi	r2,0
    491c:	10963104 	addi	r2,r2,22724
    4920:	10800017 	ldw	r2,0(r2)
    4924:	1005003a 	cmpeq	r2,r2,zero
    4928:	1000061e 	bne	r2,zero,4944 <alt_get_errno+0x3c>
    492c:	00800034 	movhi	r2,0
    4930:	10963104 	addi	r2,r2,22724
    4934:	10800017 	ldw	r2,0(r2)
    4938:	103ee83a 	callr	r2
    493c:	e0bfff15 	stw	r2,-4(fp)
    4940:	00000306 	br	4950 <alt_get_errno+0x48>
    4944:	00800034 	movhi	r2,0
    4948:	1097bb04 	addi	r2,r2,24300
    494c:	e0bfff15 	stw	r2,-4(fp)
    4950:	e0bfff17 	ldw	r2,-4(fp)
}
    4954:	e037883a 	mov	sp,fp
    4958:	dfc00117 	ldw	ra,4(sp)
    495c:	df000017 	ldw	fp,0(sp)
    4960:	dec00204 	addi	sp,sp,8
    4964:	f800283a 	ret

00004968 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4968:	deffff04 	addi	sp,sp,-4
    496c:	df000015 	stw	fp,0(sp)
    4970:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4974:	e037883a 	mov	sp,fp
    4978:	df000017 	ldw	fp,0(sp)
    497c:	dec00104 	addi	sp,sp,4
    4980:	f800283a 	ret

00004984 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4984:	defffc04 	addi	sp,sp,-16
    4988:	df000315 	stw	fp,12(sp)
    498c:	df000304 	addi	fp,sp,12
    4990:	e13ffd15 	stw	r4,-12(fp)
    4994:	e17ffe15 	stw	r5,-8(fp)
    4998:	e1bfff15 	stw	r6,-4(fp)
  return len;
    499c:	e0bfff17 	ldw	r2,-4(fp)
}
    49a0:	e037883a 	mov	sp,fp
    49a4:	df000017 	ldw	fp,0(sp)
    49a8:	dec00104 	addi	sp,sp,4
    49ac:	f800283a 	ret

000049b0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    49b0:	defff904 	addi	sp,sp,-28
    49b4:	dfc00615 	stw	ra,24(sp)
    49b8:	df000515 	stw	fp,20(sp)
    49bc:	df000504 	addi	fp,sp,20
    49c0:	e13ffd15 	stw	r4,-12(fp)
    49c4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    49c8:	e0bffd17 	ldw	r2,-12(fp)
    49cc:	1005003a 	cmpeq	r2,r2,zero
    49d0:	1000041e 	bne	r2,zero,49e4 <alt_dev_llist_insert+0x34>
    49d4:	e0bffd17 	ldw	r2,-12(fp)
    49d8:	10800217 	ldw	r2,8(r2)
    49dc:	1004c03a 	cmpne	r2,r2,zero
    49e0:	1000071e 	bne	r2,zero,4a00 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    49e4:	0004a640 	call	4a64 <alt_get_errno>
    49e8:	1007883a 	mov	r3,r2
    49ec:	00800584 	movi	r2,22
    49f0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    49f4:	00bffa84 	movi	r2,-22
    49f8:	e0bfff15 	stw	r2,-4(fp)
    49fc:	00001306 	br	4a4c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4a00:	e0fffd17 	ldw	r3,-12(fp)
    4a04:	e0bffe17 	ldw	r2,-8(fp)
    4a08:	e0bffb15 	stw	r2,-20(fp)
    4a0c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4a10:	e0fffc17 	ldw	r3,-16(fp)
    4a14:	e0bffb17 	ldw	r2,-20(fp)
    4a18:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    4a1c:	e0bffb17 	ldw	r2,-20(fp)
    4a20:	10c00017 	ldw	r3,0(r2)
    4a24:	e0bffc17 	ldw	r2,-16(fp)
    4a28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4a2c:	e0bffb17 	ldw	r2,-20(fp)
    4a30:	10c00017 	ldw	r3,0(r2)
    4a34:	e0bffc17 	ldw	r2,-16(fp)
    4a38:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    4a3c:	e0fffb17 	ldw	r3,-20(fp)
    4a40:	e0bffc17 	ldw	r2,-16(fp)
    4a44:	18800015 	stw	r2,0(r3)

  return 0;  
    4a48:	e03fff15 	stw	zero,-4(fp)
    4a4c:	e0bfff17 	ldw	r2,-4(fp)
}
    4a50:	e037883a 	mov	sp,fp
    4a54:	dfc00117 	ldw	ra,4(sp)
    4a58:	df000017 	ldw	fp,0(sp)
    4a5c:	dec00204 	addi	sp,sp,8
    4a60:	f800283a 	ret

00004a64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4a64:	defffd04 	addi	sp,sp,-12
    4a68:	dfc00215 	stw	ra,8(sp)
    4a6c:	df000115 	stw	fp,4(sp)
    4a70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4a74:	00800034 	movhi	r2,0
    4a78:	10963104 	addi	r2,r2,22724
    4a7c:	10800017 	ldw	r2,0(r2)
    4a80:	1005003a 	cmpeq	r2,r2,zero
    4a84:	1000061e 	bne	r2,zero,4aa0 <alt_get_errno+0x3c>
    4a88:	00800034 	movhi	r2,0
    4a8c:	10963104 	addi	r2,r2,22724
    4a90:	10800017 	ldw	r2,0(r2)
    4a94:	103ee83a 	callr	r2
    4a98:	e0bfff15 	stw	r2,-4(fp)
    4a9c:	00000306 	br	4aac <alt_get_errno+0x48>
    4aa0:	00800034 	movhi	r2,0
    4aa4:	1097bb04 	addi	r2,r2,24300
    4aa8:	e0bfff15 	stw	r2,-4(fp)
    4aac:	e0bfff17 	ldw	r2,-4(fp)
}
    4ab0:	e037883a 	mov	sp,fp
    4ab4:	dfc00117 	ldw	ra,4(sp)
    4ab8:	df000017 	ldw	fp,0(sp)
    4abc:	dec00204 	addi	sp,sp,8
    4ac0:	f800283a 	ret

00004ac4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4ac4:	defffd04 	addi	sp,sp,-12
    4ac8:	dfc00215 	stw	ra,8(sp)
    4acc:	df000115 	stw	fp,4(sp)
    4ad0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4ad4:	00bfff04 	movi	r2,-4
    4ad8:	00c00034 	movhi	r3,0
    4adc:	18d48404 	addi	r3,r3,21008
    4ae0:	1885883a 	add	r2,r3,r2
    4ae4:	e0bfff15 	stw	r2,-4(fp)
    4ae8:	00000606 	br	4b04 <_do_ctors+0x40>
        (*ctor) (); 
    4aec:	e0bfff17 	ldw	r2,-4(fp)
    4af0:	10800017 	ldw	r2,0(r2)
    4af4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4af8:	e0bfff17 	ldw	r2,-4(fp)
    4afc:	10bfff04 	addi	r2,r2,-4
    4b00:	e0bfff15 	stw	r2,-4(fp)
    4b04:	e0ffff17 	ldw	r3,-4(fp)
    4b08:	00800034 	movhi	r2,0
    4b0c:	10948304 	addi	r2,r2,21004
    4b10:	18bff62e 	bgeu	r3,r2,4aec <_do_ctors+0x28>
        (*ctor) (); 
}
    4b14:	e037883a 	mov	sp,fp
    4b18:	dfc00117 	ldw	ra,4(sp)
    4b1c:	df000017 	ldw	fp,0(sp)
    4b20:	dec00204 	addi	sp,sp,8
    4b24:	f800283a 	ret

00004b28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4b28:	defffd04 	addi	sp,sp,-12
    4b2c:	dfc00215 	stw	ra,8(sp)
    4b30:	df000115 	stw	fp,4(sp)
    4b34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4b38:	00bfff04 	movi	r2,-4
    4b3c:	00c00034 	movhi	r3,0
    4b40:	18d48404 	addi	r3,r3,21008
    4b44:	1885883a 	add	r2,r3,r2
    4b48:	e0bfff15 	stw	r2,-4(fp)
    4b4c:	00000606 	br	4b68 <_do_dtors+0x40>
        (*dtor) (); 
    4b50:	e0bfff17 	ldw	r2,-4(fp)
    4b54:	10800017 	ldw	r2,0(r2)
    4b58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4b5c:	e0bfff17 	ldw	r2,-4(fp)
    4b60:	10bfff04 	addi	r2,r2,-4
    4b64:	e0bfff15 	stw	r2,-4(fp)
    4b68:	e0ffff17 	ldw	r3,-4(fp)
    4b6c:	00800034 	movhi	r2,0
    4b70:	10948404 	addi	r2,r2,21008
    4b74:	18bff62e 	bgeu	r3,r2,4b50 <_do_dtors+0x28>
        (*dtor) (); 
}
    4b78:	e037883a 	mov	sp,fp
    4b7c:	dfc00117 	ldw	ra,4(sp)
    4b80:	df000017 	ldw	fp,0(sp)
    4b84:	dec00204 	addi	sp,sp,8
    4b88:	f800283a 	ret

00004b8c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4b8c:	defff904 	addi	sp,sp,-28
    4b90:	dfc00615 	stw	ra,24(sp)
    4b94:	df000515 	stw	fp,20(sp)
    4b98:	df000504 	addi	fp,sp,20
    4b9c:	e13ffd15 	stw	r4,-12(fp)
    4ba0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4ba4:	e0bffe17 	ldw	r2,-8(fp)
    4ba8:	10800017 	ldw	r2,0(r2)
    4bac:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4bb0:	e13ffd17 	ldw	r4,-12(fp)
    4bb4:	0004e500 	call	4e50 <strlen>
    4bb8:	10800044 	addi	r2,r2,1
    4bbc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4bc0:	00000d06 	br	4bf8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4bc4:	e0bffc17 	ldw	r2,-16(fp)
    4bc8:	11000217 	ldw	r4,8(r2)
    4bcc:	e1bffb17 	ldw	r6,-20(fp)
    4bd0:	e17ffd17 	ldw	r5,-12(fp)
    4bd4:	0004d200 	call	4d20 <memcmp>
    4bd8:	1004c03a 	cmpne	r2,r2,zero
    4bdc:	1000031e 	bne	r2,zero,4bec <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4be0:	e0bffc17 	ldw	r2,-16(fp)
    4be4:	e0bfff15 	stw	r2,-4(fp)
    4be8:	00000706 	br	4c08 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4bec:	e0bffc17 	ldw	r2,-16(fp)
    4bf0:	10800017 	ldw	r2,0(r2)
    4bf4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4bf8:	e0fffe17 	ldw	r3,-8(fp)
    4bfc:	e0bffc17 	ldw	r2,-16(fp)
    4c00:	10fff01e 	bne	r2,r3,4bc4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4c04:	e03fff15 	stw	zero,-4(fp)
    4c08:	e0bfff17 	ldw	r2,-4(fp)
}
    4c0c:	e037883a 	mov	sp,fp
    4c10:	dfc00117 	ldw	ra,4(sp)
    4c14:	df000017 	ldw	fp,0(sp)
    4c18:	dec00204 	addi	sp,sp,8
    4c1c:	f800283a 	ret

00004c20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4c20:	deffff04 	addi	sp,sp,-4
    4c24:	df000015 	stw	fp,0(sp)
    4c28:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4c2c:	e037883a 	mov	sp,fp
    4c30:	df000017 	ldw	fp,0(sp)
    4c34:	dec00104 	addi	sp,sp,4
    4c38:	f800283a 	ret

00004c3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4c3c:	defffc04 	addi	sp,sp,-16
    4c40:	dfc00315 	stw	ra,12(sp)
    4c44:	df000215 	stw	fp,8(sp)
    4c48:	dc000115 	stw	r16,4(sp)
    4c4c:	df000104 	addi	fp,sp,4
    4c50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4c54:	e0bfff17 	ldw	r2,-4(fp)
    4c58:	108000d0 	cmplti	r2,r2,3
    4c5c:	10000f1e 	bne	r2,zero,4c9c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    4c60:	e13fff17 	ldw	r4,-4(fp)
    4c64:	04000034 	movhi	r16,0
    4c68:	8414cc04 	addi	r16,r16,21296
    4c6c:	01400304 	movi	r5,12
    4c70:	00042440 	call	4244 <__mulsi3>
    4c74:	1405883a 	add	r2,r2,r16
    4c78:	10800204 	addi	r2,r2,8
    4c7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4c80:	e13fff17 	ldw	r4,-4(fp)
    4c84:	04000034 	movhi	r16,0
    4c88:	8414cc04 	addi	r16,r16,21296
    4c8c:	01400304 	movi	r5,12
    4c90:	00042440 	call	4244 <__mulsi3>
    4c94:	1405883a 	add	r2,r2,r16
    4c98:	10000015 	stw	zero,0(r2)
  }
}
    4c9c:	e037883a 	mov	sp,fp
    4ca0:	dfc00217 	ldw	ra,8(sp)
    4ca4:	df000117 	ldw	fp,4(sp)
    4ca8:	dc000017 	ldw	r16,0(sp)
    4cac:	dec00304 	addi	sp,sp,12
    4cb0:	f800283a 	ret

00004cb4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    4cb4:	deffff04 	addi	sp,sp,-4
    4cb8:	df000015 	stw	fp,0(sp)
    4cbc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4cc0:	000170fa 	wrctl	ienable,zero
}
    4cc4:	e037883a 	mov	sp,fp
    4cc8:	df000017 	ldw	fp,0(sp)
    4ccc:	dec00104 	addi	sp,sp,4
    4cd0:	f800283a 	ret

00004cd4 <atexit>:
    4cd4:	200b883a 	mov	r5,r4
    4cd8:	000d883a 	mov	r6,zero
    4cdc:	0009883a 	mov	r4,zero
    4ce0:	000f883a 	mov	r7,zero
    4ce4:	0004ec41 	jmpi	4ec4 <__register_exitproc>

00004ce8 <exit>:
    4ce8:	defffe04 	addi	sp,sp,-8
    4cec:	000b883a 	mov	r5,zero
    4cf0:	dc000015 	stw	r16,0(sp)
    4cf4:	dfc00115 	stw	ra,4(sp)
    4cf8:	2021883a 	mov	r16,r4
    4cfc:	0004ffc0 	call	4ffc <__call_exitprocs>
    4d00:	00800034 	movhi	r2,0
    4d04:	10963304 	addi	r2,r2,22732
    4d08:	11000017 	ldw	r4,0(r2)
    4d0c:	20800f17 	ldw	r2,60(r4)
    4d10:	10000126 	beq	r2,zero,4d18 <exit+0x30>
    4d14:	103ee83a 	callr	r2
    4d18:	8009883a 	mov	r4,r16
    4d1c:	00051ec0 	call	51ec <_exit>

00004d20 <memcmp>:
    4d20:	00c000c4 	movi	r3,3
    4d24:	1980032e 	bgeu	r3,r6,4d34 <memcmp+0x14>
    4d28:	2144b03a 	or	r2,r4,r5
    4d2c:	10c4703a 	and	r2,r2,r3
    4d30:	10000f26 	beq	r2,zero,4d70 <memcmp+0x50>
    4d34:	31ffffc4 	addi	r7,r6,-1
    4d38:	3000061e 	bne	r6,zero,4d54 <memcmp+0x34>
    4d3c:	00000a06 	br	4d68 <memcmp+0x48>
    4d40:	39ffffc4 	addi	r7,r7,-1
    4d44:	00bfffc4 	movi	r2,-1
    4d48:	21000044 	addi	r4,r4,1
    4d4c:	29400044 	addi	r5,r5,1
    4d50:	38800526 	beq	r7,r2,4d68 <memcmp+0x48>
    4d54:	20c00003 	ldbu	r3,0(r4)
    4d58:	28800003 	ldbu	r2,0(r5)
    4d5c:	18bff826 	beq	r3,r2,4d40 <memcmp+0x20>
    4d60:	1885c83a 	sub	r2,r3,r2
    4d64:	f800283a 	ret
    4d68:	0005883a 	mov	r2,zero
    4d6c:	f800283a 	ret
    4d70:	180f883a 	mov	r7,r3
    4d74:	20c00017 	ldw	r3,0(r4)
    4d78:	28800017 	ldw	r2,0(r5)
    4d7c:	18bfed1e 	bne	r3,r2,4d34 <memcmp+0x14>
    4d80:	31bfff04 	addi	r6,r6,-4
    4d84:	21000104 	addi	r4,r4,4
    4d88:	29400104 	addi	r5,r5,4
    4d8c:	39bff936 	bltu	r7,r6,4d74 <memcmp+0x54>
    4d90:	003fe806 	br	4d34 <memcmp+0x14>

00004d94 <strcmp>:
    4d94:	2144b03a 	or	r2,r4,r5
    4d98:	108000cc 	andi	r2,r2,3
    4d9c:	10001d1e 	bne	r2,zero,4e14 <strcmp+0x80>
    4da0:	200f883a 	mov	r7,r4
    4da4:	28800017 	ldw	r2,0(r5)
    4da8:	21000017 	ldw	r4,0(r4)
    4dac:	280d883a 	mov	r6,r5
    4db0:	2080161e 	bne	r4,r2,4e0c <strcmp+0x78>
    4db4:	023fbff4 	movhi	r8,65279
    4db8:	423fbfc4 	addi	r8,r8,-257
    4dbc:	2207883a 	add	r3,r4,r8
    4dc0:	01602074 	movhi	r5,32897
    4dc4:	29602004 	addi	r5,r5,-32640
    4dc8:	1946703a 	and	r3,r3,r5
    4dcc:	0104303a 	nor	r2,zero,r4
    4dd0:	10c4703a 	and	r2,r2,r3
    4dd4:	10001c1e 	bne	r2,zero,4e48 <strcmp+0xb4>
    4dd8:	4013883a 	mov	r9,r8
    4ddc:	2811883a 	mov	r8,r5
    4de0:	00000106 	br	4de8 <strcmp+0x54>
    4de4:	1800181e 	bne	r3,zero,4e48 <strcmp+0xb4>
    4de8:	39c00104 	addi	r7,r7,4
    4dec:	39000017 	ldw	r4,0(r7)
    4df0:	31800104 	addi	r6,r6,4
    4df4:	31400017 	ldw	r5,0(r6)
    4df8:	2245883a 	add	r2,r4,r9
    4dfc:	1204703a 	and	r2,r2,r8
    4e00:	0106303a 	nor	r3,zero,r4
    4e04:	1886703a 	and	r3,r3,r2
    4e08:	217ff626 	beq	r4,r5,4de4 <strcmp+0x50>
    4e0c:	3809883a 	mov	r4,r7
    4e10:	300b883a 	mov	r5,r6
    4e14:	20c00007 	ldb	r3,0(r4)
    4e18:	1800051e 	bne	r3,zero,4e30 <strcmp+0x9c>
    4e1c:	00000606 	br	4e38 <strcmp+0xa4>
    4e20:	21000044 	addi	r4,r4,1
    4e24:	20c00007 	ldb	r3,0(r4)
    4e28:	29400044 	addi	r5,r5,1
    4e2c:	18000226 	beq	r3,zero,4e38 <strcmp+0xa4>
    4e30:	28800007 	ldb	r2,0(r5)
    4e34:	18bffa26 	beq	r3,r2,4e20 <strcmp+0x8c>
    4e38:	20c00003 	ldbu	r3,0(r4)
    4e3c:	28800003 	ldbu	r2,0(r5)
    4e40:	1885c83a 	sub	r2,r3,r2
    4e44:	f800283a 	ret
    4e48:	0005883a 	mov	r2,zero
    4e4c:	f800283a 	ret

00004e50 <strlen>:
    4e50:	208000cc 	andi	r2,r4,3
    4e54:	2011883a 	mov	r8,r4
    4e58:	1000161e 	bne	r2,zero,4eb4 <strlen+0x64>
    4e5c:	20c00017 	ldw	r3,0(r4)
    4e60:	017fbff4 	movhi	r5,65279
    4e64:	297fbfc4 	addi	r5,r5,-257
    4e68:	01e02074 	movhi	r7,32897
    4e6c:	39e02004 	addi	r7,r7,-32640
    4e70:	1945883a 	add	r2,r3,r5
    4e74:	11c4703a 	and	r2,r2,r7
    4e78:	00c6303a 	nor	r3,zero,r3
    4e7c:	1886703a 	and	r3,r3,r2
    4e80:	18000c1e 	bne	r3,zero,4eb4 <strlen+0x64>
    4e84:	280d883a 	mov	r6,r5
    4e88:	380b883a 	mov	r5,r7
    4e8c:	21000104 	addi	r4,r4,4
    4e90:	20800017 	ldw	r2,0(r4)
    4e94:	1187883a 	add	r3,r2,r6
    4e98:	1946703a 	and	r3,r3,r5
    4e9c:	0084303a 	nor	r2,zero,r2
    4ea0:	10c4703a 	and	r2,r2,r3
    4ea4:	103ff926 	beq	r2,zero,4e8c <strlen+0x3c>
    4ea8:	20800007 	ldb	r2,0(r4)
    4eac:	10000326 	beq	r2,zero,4ebc <strlen+0x6c>
    4eb0:	21000044 	addi	r4,r4,1
    4eb4:	20800007 	ldb	r2,0(r4)
    4eb8:	103ffd1e 	bne	r2,zero,4eb0 <strlen+0x60>
    4ebc:	2205c83a 	sub	r2,r4,r8
    4ec0:	f800283a 	ret

00004ec4 <__register_exitproc>:
    4ec4:	defffa04 	addi	sp,sp,-24
    4ec8:	00800034 	movhi	r2,0
    4ecc:	10963304 	addi	r2,r2,22732
    4ed0:	dc000015 	stw	r16,0(sp)
    4ed4:	14000017 	ldw	r16,0(r2)
    4ed8:	dd000415 	stw	r20,16(sp)
    4edc:	2829883a 	mov	r20,r5
    4ee0:	81405217 	ldw	r5,328(r16)
    4ee4:	dcc00315 	stw	r19,12(sp)
    4ee8:	dc800215 	stw	r18,8(sp)
    4eec:	dc400115 	stw	r17,4(sp)
    4ef0:	dfc00515 	stw	ra,20(sp)
    4ef4:	2023883a 	mov	r17,r4
    4ef8:	3027883a 	mov	r19,r6
    4efc:	3825883a 	mov	r18,r7
    4f00:	28002526 	beq	r5,zero,4f98 <__register_exitproc+0xd4>
    4f04:	29000117 	ldw	r4,4(r5)
    4f08:	008007c4 	movi	r2,31
    4f0c:	11002716 	blt	r2,r4,4fac <__register_exitproc+0xe8>
    4f10:	8800101e 	bne	r17,zero,4f54 <__register_exitproc+0x90>
    4f14:	2105883a 	add	r2,r4,r4
    4f18:	1085883a 	add	r2,r2,r2
    4f1c:	20c00044 	addi	r3,r4,1
    4f20:	1145883a 	add	r2,r2,r5
    4f24:	0009883a 	mov	r4,zero
    4f28:	15000215 	stw	r20,8(r2)
    4f2c:	28c00115 	stw	r3,4(r5)
    4f30:	2005883a 	mov	r2,r4
    4f34:	dfc00517 	ldw	ra,20(sp)
    4f38:	dd000417 	ldw	r20,16(sp)
    4f3c:	dcc00317 	ldw	r19,12(sp)
    4f40:	dc800217 	ldw	r18,8(sp)
    4f44:	dc400117 	ldw	r17,4(sp)
    4f48:	dc000017 	ldw	r16,0(sp)
    4f4c:	dec00604 	addi	sp,sp,24
    4f50:	f800283a 	ret
    4f54:	29802204 	addi	r6,r5,136
    4f58:	00800044 	movi	r2,1
    4f5c:	110e983a 	sll	r7,r2,r4
    4f60:	30c04017 	ldw	r3,256(r6)
    4f64:	2105883a 	add	r2,r4,r4
    4f68:	1085883a 	add	r2,r2,r2
    4f6c:	1185883a 	add	r2,r2,r6
    4f70:	19c6b03a 	or	r3,r3,r7
    4f74:	14802015 	stw	r18,128(r2)
    4f78:	14c00015 	stw	r19,0(r2)
    4f7c:	00800084 	movi	r2,2
    4f80:	30c04015 	stw	r3,256(r6)
    4f84:	88bfe31e 	bne	r17,r2,4f14 <__register_exitproc+0x50>
    4f88:	30804117 	ldw	r2,260(r6)
    4f8c:	11c4b03a 	or	r2,r2,r7
    4f90:	30804115 	stw	r2,260(r6)
    4f94:	003fdf06 	br	4f14 <__register_exitproc+0x50>
    4f98:	00800034 	movhi	r2,0
    4f9c:	1097bc04 	addi	r2,r2,24304
    4fa0:	100b883a 	mov	r5,r2
    4fa4:	80805215 	stw	r2,328(r16)
    4fa8:	003fd606 	br	4f04 <__register_exitproc+0x40>
    4fac:	00800034 	movhi	r2,0
    4fb0:	10800004 	addi	r2,r2,0
    4fb4:	1000021e 	bne	r2,zero,4fc0 <__register_exitproc+0xfc>
    4fb8:	013fffc4 	movi	r4,-1
    4fbc:	003fdc06 	br	4f30 <__register_exitproc+0x6c>
    4fc0:	01006404 	movi	r4,400
    4fc4:	103ee83a 	callr	r2
    4fc8:	1007883a 	mov	r3,r2
    4fcc:	103ffa26 	beq	r2,zero,4fb8 <__register_exitproc+0xf4>
    4fd0:	80805217 	ldw	r2,328(r16)
    4fd4:	180b883a 	mov	r5,r3
    4fd8:	18000115 	stw	zero,4(r3)
    4fdc:	18800015 	stw	r2,0(r3)
    4fe0:	80c05215 	stw	r3,328(r16)
    4fe4:	18006215 	stw	zero,392(r3)
    4fe8:	18006315 	stw	zero,396(r3)
    4fec:	0009883a 	mov	r4,zero
    4ff0:	883fc826 	beq	r17,zero,4f14 <__register_exitproc+0x50>
    4ff4:	003fd706 	br	4f54 <__register_exitproc+0x90>

00004ff8 <register_fini>:
    4ff8:	f800283a 	ret

00004ffc <__call_exitprocs>:
    4ffc:	00800034 	movhi	r2,0
    5000:	10963304 	addi	r2,r2,22732
    5004:	10800017 	ldw	r2,0(r2)
    5008:	defff304 	addi	sp,sp,-52
    500c:	df000b15 	stw	fp,44(sp)
    5010:	d8800115 	stw	r2,4(sp)
    5014:	00800034 	movhi	r2,0
    5018:	10800004 	addi	r2,r2,0
    501c:	1005003a 	cmpeq	r2,r2,zero
    5020:	d8800215 	stw	r2,8(sp)
    5024:	d8800117 	ldw	r2,4(sp)
    5028:	dd400815 	stw	r21,32(sp)
    502c:	dd000715 	stw	r20,28(sp)
    5030:	10805204 	addi	r2,r2,328
    5034:	dfc00c15 	stw	ra,48(sp)
    5038:	ddc00a15 	stw	r23,40(sp)
    503c:	dd800915 	stw	r22,36(sp)
    5040:	dcc00615 	stw	r19,24(sp)
    5044:	dc800515 	stw	r18,20(sp)
    5048:	dc400415 	stw	r17,16(sp)
    504c:	dc000315 	stw	r16,12(sp)
    5050:	282b883a 	mov	r21,r5
    5054:	2039883a 	mov	fp,r4
    5058:	d8800015 	stw	r2,0(sp)
    505c:	2829003a 	cmpeq	r20,r5,zero
    5060:	d8800117 	ldw	r2,4(sp)
    5064:	14405217 	ldw	r17,328(r2)
    5068:	88001026 	beq	r17,zero,50ac <__call_exitprocs+0xb0>
    506c:	ddc00017 	ldw	r23,0(sp)
    5070:	88800117 	ldw	r2,4(r17)
    5074:	8c802204 	addi	r18,r17,136
    5078:	143fffc4 	addi	r16,r2,-1
    507c:	80000916 	blt	r16,zero,50a4 <__call_exitprocs+0xa8>
    5080:	05bfffc4 	movi	r22,-1
    5084:	a000151e 	bne	r20,zero,50dc <__call_exitprocs+0xe0>
    5088:	8409883a 	add	r4,r16,r16
    508c:	2105883a 	add	r2,r4,r4
    5090:	1485883a 	add	r2,r2,r18
    5094:	10c02017 	ldw	r3,128(r2)
    5098:	a8c01126 	beq	r21,r3,50e0 <__call_exitprocs+0xe4>
    509c:	843fffc4 	addi	r16,r16,-1
    50a0:	85bff81e 	bne	r16,r22,5084 <__call_exitprocs+0x88>
    50a4:	d8800217 	ldw	r2,8(sp)
    50a8:	10003126 	beq	r2,zero,5170 <__call_exitprocs+0x174>
    50ac:	dfc00c17 	ldw	ra,48(sp)
    50b0:	df000b17 	ldw	fp,44(sp)
    50b4:	ddc00a17 	ldw	r23,40(sp)
    50b8:	dd800917 	ldw	r22,36(sp)
    50bc:	dd400817 	ldw	r21,32(sp)
    50c0:	dd000717 	ldw	r20,28(sp)
    50c4:	dcc00617 	ldw	r19,24(sp)
    50c8:	dc800517 	ldw	r18,20(sp)
    50cc:	dc400417 	ldw	r17,16(sp)
    50d0:	dc000317 	ldw	r16,12(sp)
    50d4:	dec00d04 	addi	sp,sp,52
    50d8:	f800283a 	ret
    50dc:	8409883a 	add	r4,r16,r16
    50e0:	88c00117 	ldw	r3,4(r17)
    50e4:	2105883a 	add	r2,r4,r4
    50e8:	1445883a 	add	r2,r2,r17
    50ec:	18ffffc4 	addi	r3,r3,-1
    50f0:	11800217 	ldw	r6,8(r2)
    50f4:	1c001526 	beq	r3,r16,514c <__call_exitprocs+0x150>
    50f8:	10000215 	stw	zero,8(r2)
    50fc:	303fe726 	beq	r6,zero,509c <__call_exitprocs+0xa0>
    5100:	00c00044 	movi	r3,1
    5104:	1c06983a 	sll	r3,r3,r16
    5108:	90804017 	ldw	r2,256(r18)
    510c:	8cc00117 	ldw	r19,4(r17)
    5110:	1884703a 	and	r2,r3,r2
    5114:	10001426 	beq	r2,zero,5168 <__call_exitprocs+0x16c>
    5118:	90804117 	ldw	r2,260(r18)
    511c:	1884703a 	and	r2,r3,r2
    5120:	10000c1e 	bne	r2,zero,5154 <__call_exitprocs+0x158>
    5124:	2105883a 	add	r2,r4,r4
    5128:	1485883a 	add	r2,r2,r18
    512c:	11400017 	ldw	r5,0(r2)
    5130:	e009883a 	mov	r4,fp
    5134:	303ee83a 	callr	r6
    5138:	88800117 	ldw	r2,4(r17)
    513c:	98bfc81e 	bne	r19,r2,5060 <__call_exitprocs+0x64>
    5140:	b8800017 	ldw	r2,0(r23)
    5144:	147fd526 	beq	r2,r17,509c <__call_exitprocs+0xa0>
    5148:	003fc506 	br	5060 <__call_exitprocs+0x64>
    514c:	8c000115 	stw	r16,4(r17)
    5150:	003fea06 	br	50fc <__call_exitprocs+0x100>
    5154:	2105883a 	add	r2,r4,r4
    5158:	1485883a 	add	r2,r2,r18
    515c:	11000017 	ldw	r4,0(r2)
    5160:	303ee83a 	callr	r6
    5164:	003ff406 	br	5138 <__call_exitprocs+0x13c>
    5168:	303ee83a 	callr	r6
    516c:	003ff206 	br	5138 <__call_exitprocs+0x13c>
    5170:	88800117 	ldw	r2,4(r17)
    5174:	1000081e 	bne	r2,zero,5198 <__call_exitprocs+0x19c>
    5178:	89000017 	ldw	r4,0(r17)
    517c:	20000726 	beq	r4,zero,519c <__call_exitprocs+0x1a0>
    5180:	b9000015 	stw	r4,0(r23)
    5184:	8809883a 	mov	r4,r17
    5188:	00000000 	call	0 <__alt_mem_Onchip_Memory-0x4000>
    518c:	bc400017 	ldw	r17,0(r23)
    5190:	883fb71e 	bne	r17,zero,5070 <__call_exitprocs+0x74>
    5194:	003fc506 	br	50ac <__call_exitprocs+0xb0>
    5198:	89000017 	ldw	r4,0(r17)
    519c:	882f883a 	mov	r23,r17
    51a0:	2023883a 	mov	r17,r4
    51a4:	883fb21e 	bne	r17,zero,5070 <__call_exitprocs+0x74>
    51a8:	003fc006 	br	50ac <__call_exitprocs+0xb0>

000051ac <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    51ac:	defffd04 	addi	sp,sp,-12
    51b0:	df000215 	stw	fp,8(sp)
    51b4:	df000204 	addi	fp,sp,8
    51b8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    51bc:	e0bfff17 	ldw	r2,-4(fp)
    51c0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    51c4:	e0bffe17 	ldw	r2,-8(fp)
    51c8:	1005003a 	cmpeq	r2,r2,zero
    51cc:	1000021e 	bne	r2,zero,51d8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    51d0:	002af070 	cmpltui	zero,zero,43969
    51d4:	00000106 	br	51dc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    51d8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    51dc:	e037883a 	mov	sp,fp
    51e0:	df000017 	ldw	fp,0(sp)
    51e4:	dec00104 	addi	sp,sp,4
    51e8:	f800283a 	ret

000051ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    51ec:	defffd04 	addi	sp,sp,-12
    51f0:	dfc00215 	stw	ra,8(sp)
    51f4:	df000115 	stw	fp,4(sp)
    51f8:	df000104 	addi	fp,sp,4
    51fc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    5200:	e13fff17 	ldw	r4,-4(fp)
    5204:	00051ac0 	call	51ac <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5208:	003fff06 	br	5208 <_exit+0x1c>
    520c:	00004ff8 	rdprs	zero,zero,319
